"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

import cStringIO as StringIO
import struct

class match_data(object):
    __slots__ = ["IsBlueAlliance", "TeamNumber", "TeamName", "FieldObjects"]

    def __init__(self):
        self.IsBlueAlliance = False
        self.TeamNumber = 0
        self.TeamName = ""
        self.FieldObjects = ""

    def encode(self):
        buf = StringIO.StringIO()
        buf.write(match_data._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">bi", self.IsBlueAlliance, self.TeamNumber))
        __TeamName_encoded = self.TeamName.encode('utf-8')
        buf.write(struct.pack('>I', len(__TeamName_encoded)+1))
        buf.write(__TeamName_encoded)
        buf.write("\0")
        __FieldObjects_encoded = self.FieldObjects.encode('utf-8')
        buf.write(struct.pack('>I', len(__FieldObjects_encoded)+1))
        buf.write(__FieldObjects_encoded)
        buf.write("\0")

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = StringIO.StringIO(data)
        if buf.read(8) != match_data._get_packed_fingerprint():
            raise ValueError("Decode error")
        return match_data._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = match_data()
        self.IsBlueAlliance, self.TeamNumber = struct.unpack(">bi", buf.read(5))
        __TeamName_len = struct.unpack('>I', buf.read(4))[0]
        self.TeamName = buf.read(__TeamName_len)[:-1].decode('utf-8', 'replace')
        __FieldObjects_len = struct.unpack('>I', buf.read(4))[0]
        self.FieldObjects = buf.read(__FieldObjects_len)[:-1].decode('utf-8', 'replace')
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if match_data in parents: return 0
        tmphash = (0x8d10fa2da8ff989a) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if match_data._packed_fingerprint is None:
            match_data._packed_fingerprint = struct.pack(">Q", match_data._get_hash_recursive([]))
        return match_data._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

