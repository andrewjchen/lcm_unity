/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package forseti2;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class match_data implements lcm.lcm.LCMEncodable
{
    public boolean IsBlueAlliance;
    public int TeamNumber;
    public String TeamName;
    public String FieldObjects;
 
    public match_data()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x8d10fa2da8ff989aL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(forseti2.match_data.class))
            return 0L;
 
        classes.add(forseti2.match_data.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeByte( this.IsBlueAlliance ? 1 : 0); 
 
        outs.writeInt(this.TeamNumber); 
 
        __strbuf = new char[this.TeamName.length()]; this.TeamName.getChars(0, this.TeamName.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        __strbuf = new char[this.FieldObjects.length()]; this.FieldObjects.getChars(0, this.FieldObjects.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
    }
 
    public match_data(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public match_data(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static forseti2.match_data _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        forseti2.match_data o = new forseti2.match_data();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.IsBlueAlliance = ins.readByte()!=0;
 
        this.TeamNumber = ins.readInt();
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.TeamName = new String(__strbuf);
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.FieldObjects = new String(__strbuf);
 
    }
 
    public forseti2.match_data copy()
    {
        forseti2.match_data outobj = new forseti2.match_data();
        outobj.IsBlueAlliance = this.IsBlueAlliance;
 
        outobj.TeamNumber = this.TeamNumber;
 
        outobj.TeamName = this.TeamName;
 
        outobj.FieldObjects = this.FieldObjects;
 
        return outobj;
    }
 
}

